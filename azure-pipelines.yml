# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


# Triggers can be based on specific branches, tags, or even schedules.

# trigger:
#   schedules:
#     - cron: "0 0 * * *"

trigger:
  branches:
    include:
      - master
      # - feature/*

  # paths:
  #   exclude:
  #     - README.md

# pr:
#   branches:
#     include:
#     - master
#     - feature*

# variables:
#   - group: domo-api-variables
#   - name: BuildConfiguration
#     value: "Release"

resources:
  - repo: self

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    jobs:
      - job: ScriptJob
        # Job configuration goes here
        steps:

          - powershell: 'Write-Host "I am running PowerShell on a pipeline agent. Woohoo!!"'

          - powershell: |
               'This is script line 1
               This is script line 2'

          - powershell: $(Build.SourcesDirectory)\Powershell\script1.ps1

          - pwsh: $(Build.SourcesDirectory)/Powershell/script1.ps1

          - task: PowerShell@2
            displayName: 'PowerShell@2: inline'         
            inputs:
              targetType: 'inline'
              script: 'Write-Host "This is me running PowerShell code!"'    

          - task: PowerShell@2
            displayName: 'PowerShell@2: filepath'
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)/Powershell/script1.ps1'
              pwsh: true
              # arguments: 'whatever your script needs..'

          - script: echo Hello, world!
            displayName: 'cross-platform: one-line script'         
          
          - script: |
              echo Add other tasks to build, test, and deploy your project.
              echo See https://aka.ms/yaml
            displayName: 'cross-platform: multi-line script'

          - task: Bash@3
            displayName: 'Bash@3: inline'
            inputs:
              targetType: inline
              script: |
                echo "test"   
          
          # Linux
          - bash: |
              export IPADDR=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
              echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
            condition: eq( variables['Agent.OS'], 'Linux' )
            displayName: Get IP on Linux
          # macOS
          - bash: |
              export IPADDR=$(ifconfig | grep 'en0' -A3 | grep inet | tail -n1 | awk '{print $2}')
              echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
            condition: eq( variables['Agent.OS'], 'Darwin' )
            displayName: Get IP on macOS
          # Windows
          - powershell: |
              Set-Variable -Name IPADDR -Value ((Get-NetIPAddress | ?{ $_.AddressFamily -eq "IPv4" -and !($_.IPAddress -match "169") -and !($_.IPaddress -match "127") } | Select-Object -First 1).IPAddress)
              Write-Host "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            displayName: Get IP on Windows

          # now we use the value, no matter where we got it
          - script: |
              echo The IP address is $(IP_ADDR)


          # Run a command line script using Bash on Linux and macOS and cmd.exe on Windows.
          - task: CmdLine@2
            displayName: 'CmdLine@2: one-line'
            inputs:
              script: echo "Structure of work folder of this pipeline:"
                
          # Run a command line script using Bash on Linux and macOS and cmd.exe on Windows.
          - task: CmdLine@2
            displayName: 'CmdLine@2: multi-line'
            inputs:
              script: |
                echo "Structure of work folder of this pipeline:"
                tree $(Agent.WorkFolder)/1
      
                echo "Build.ArtifactStagingDirectory:" 
                echo "$(Build.ArtifactStagingDirectory)"
      
                echo "Build.BinariesDirectory:" 
                echo "$(Build.BinariesDirectory)"
      
                echo "Build.SourcesDirectory:"
                echo "$(Build.SourcesDirectory)"

                echo  "System.DefaultWorkingDirectory:"
                echo  "$(System.DefaultWorkingDirectory)"

                echo  "Pipeline.Workspace:"
                echo  "$(Pipeline.Workspace)"

          # # Run a shell script using Bash.
          - task: ShellScript@2
            inputs:
              scriptPath: './Bash/test.sh'

          # # Run a Windows command or batch script and optionally allow it to change the environment.
          # - task: BatchScript@1
          #   inputs:
          #     filename: '.\Batch\test.bat'


          # - task: AzurePowerShell@5
          #   displayName: 'AzurePowerShell: Create Storage'
          #   inputs:
          #     azureSubscription: 'serviceconnection'
          #     ScriptType: 'FilePath'
          #     ScriptPath: './Powershell/StorageAcount.ps1'
          #     #ScriptArguments: 
          #     azurePowerShellVersion: 'LatestVersion'
    
          - task: AzureCLI@2
            displayName: Azure CLI
            inputs:
              azureSubscription: serviceconnection
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                az --version
                az account show

          - task: AzureCLI@2
            inputs:
              azureSubscription: serviceconnection
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              #arguments: '$(AZURE_STORAGE_ACCOUNT) $(AZURE_STORAGE_KEY)'
              inlineScript: '$(System.DefaultWorkingDirectory)/Powershell/StorageAcount.ps1'

          # - task: AzureCLI@2
          #   inputs:
          #     azureSubscription: serviceconnection
          #     scriptType: 'pscore'
          #     scriptLocation: 'scriptPath'
          #     #arguments: '$(AZURE_STORAGE_ACCOUNT) $(AZURE_STORAGE_KEY)'
          #     scriptPath: '$(System.DefaultWorkingDirectory)/Powershell/StorageAcount.ps1'

          # - task: AzureCLI@2
          #   displayName: 'AzureCLI: Create Storage'
          #   inputs:
          #     azureSubscription: serviceconnection
          #     scriptType: 'pscore'
          #     scriptLocation: 'scriptPath'
          #     scriptPath: './Powershell/StorageAcount.ps1'
            
  # - stage: Test
  #   jobs:
  #     - job: TestJob
  #       # Job configuration goes here

  # - stage: Infra
  #   jobs:
  #     - job: CrateStorage
  #       # Job configuration goes here
  #       steps: 
  #       # - task: AzureCLI@2
  #       #   displayName: Create Storage 
  #       #   inputs:
  #       #     azureSubscription: serviceconnection
  #       #     scriptType: pscore
  #       #     scriptLocation: inlineScript
  #       #     inlineScript: az storage account create -n "stg09234504" -g "example-rg" -l "UK South" --sku Standard_LRS

  #       # - task: AzureCLI@2
  #       #   displayName: Create Storage
  #       #   inputs:
  #       #     azureSubscription: serviceconnection
  #       #     scriptType: pscore
  #       #     scriptLocation: scriptPath
  #       #     inlineScript: "$(System.DefaultWorkingDirectory)/CLI/StorageAccount.azcli"

  #       # - task: AzureCLI@2
  #       #   displayName: 'Deploy AKS'
  #       #   inputs:
  #       #     azureSubscription: $(AzureResourceManagerConnection)
  #       #     scriptType: bash
  #       #     scriptLocation: inlineScript
  #       #     addSpnToEnvironment: true
  #       #     inlineScript: |
  #       #       #!/bin/bash     
    
  #       #       # $AKS_RG = "aks-rg"  
  #       #       # $AKS_CLUSTER = "aks-cluster"   
  #       #       # $AKS_LOCATION = "southindia"
    
  #       #       az group create -l southindia -n aks-rg
  #       #       az aks create -g aks-rg -n aks-cluster --enable-managed-identity --node-count 1 --generate-ssh-keys
